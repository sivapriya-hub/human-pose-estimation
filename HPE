import cv2
import mediapipe as mp
import numpy as np
from tensorflow.keras.models import load_model
import pyttsx3

# Initialize Mediapipe models
mp_pose = mp.solutions.pose
mp_hands = mp.solutions.hands
mp_drawing = mp.solutions.drawing_utils
pose = mp_pose.Pose(min_detection_confidence=0.5, min_tracking_confidence=0.5)
hands = mp_hands.Hands(min_detection_confidence=0.7, min_tracking_confidence=0.7)

# Load gesture recognition model
gesture_model = load_model('path_to_your_model.h5')

# Initialize text-to-speech engine
engine = pyttsx3.init()

# Gesture dictionary
gesture_dict = {
    0: "Hello",
    1: "Thank you",
    2: "Goodbye",
    3: "Yes",
    4: "No",
}

def decode_prediction(prediction):
    return gesture_dict[np.argmax(prediction)]

# Start capturing video
cap = cv2.VideoCapture(0)

while cap.isOpened():
    ret, frame = cap.read()
    if not ret:
        continue

    # Process the frame
    frame_rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
    results_pose = pose.process(frame_rgb)
    results_hands = hands.process(frame_rgb)

    # Extract hand keypoints
    if results_hands.multi_hand_landmarks:
        for hand_landmarks in results_hands.multi_hand_landmarks:
            hand_keypoints = []
            for landmark in hand_landmarks.landmark:
                hand_keypoints.append([landmark.x, landmark.y])
            hand_keypoints = np.array(hand_keypoints).flatten()

            # Predict the gesture
            prediction = gesture_model.predict(hand_keypoints.reshape(1, -1))
            gesture = decode_prediction(prediction)

            # Output text and text-to-speech
            cv2.putText(frame, f"Gesture: {gesture}", (50, 50), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0), 2, cv2.LINE_AA)
            engine.say(gesture)
            engine.runAndWait()

    # Display the frame
    cv2.imshow('Sign Language Recognition', frame)

    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

cap.release()
cv2.destroyAllWindows()
